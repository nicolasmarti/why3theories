theory Wire

use import int.Int
use import bool.Bool

type t

function ([]) t int: bool

end

theory WireVector

use import Wire
use import int.Int
use import bool.Bool

type t

function ([_..]) t int: Wire.t

end

theory NAND

use import Wire
use import WireVector
use import int.Int
use import bool.Bool

function in0: Wire.t
function in1: Wire.t
function out0: Wire.t

constant delay: int = 1

axiom nand_sem: forall t: int.  out0[t] = notb (andb in0[t-delay] in1[t-delay])

end

theory NOT

use import Wire
use import WireVector
use import int.Int
use import bool.Bool
use NAND

function in0: Wire.t
function out0: Wire.t

constant delay: int = NAND.delay

clone NAND as NAND1 with function in0 = in0, function in1 = in0, function out0 = out0

lemma not_sem:
	forall t: int.
	out0[t] = notb in0[t-delay]

end



theory NOTV

use import Wire
use import WireVector
use import int.Int
use import bool.Bool
use NOT

function in0: WireVector.t
function out0: WireVector.t

constant delay: int = NOT.delay

function in0_0: Wire.t = in0[0 ..]
function in0_1: Wire.t = in0[1 ..]
function in0_2: Wire.t = in0[2 ..]
function in0_3: Wire.t = in0[3 ..]
function in0_4: Wire.t = in0[4 ..]
function in0_5: Wire.t = in0[5 ..]
function in0_6: Wire.t = in0[6 ..]
function in0_7: Wire.t = in0[7 ..]
function in0_8: Wire.t = in0[8 ..]
function in0_9: Wire.t = in0[9 ..]
function in0_10: Wire.t = in0[10 ..]
function in0_11: Wire.t = in0[11 ..]
function in0_12: Wire.t = in0[12 ..]
function in0_13: Wire.t = in0[13 ..]
function in0_14: Wire.t = in0[14 ..]
function in0_15: Wire.t = in0[15 ..]


function out0_0: Wire.t = out0[0 ..]
function out0_1: Wire.t = out0[1 ..]
function out0_2: Wire.t = out0[2 ..]
function out0_3: Wire.t = out0[3 ..]
function out0_4: Wire.t = out0[4 ..]
function out0_5: Wire.t = out0[5 ..]
function out0_6: Wire.t = out0[6 ..]
function out0_7: Wire.t = out0[7 ..]
function out0_8: Wire.t = out0[8 ..]
function out0_9: Wire.t = out0[9 ..]
function out0_10: Wire.t = out0[10 ..]
function out0_11: Wire.t = out0[11 ..]
function out0_12: Wire.t = out0[12 ..]
function out0_13: Wire.t = out0[13 ..]
function out0_14: Wire.t = out0[14 ..]
function out0_15: Wire.t = out0[15 ..]

clone NOT as NOT1 with function in0 = in0_0, function out0 = out0_0
clone NOT as NOT2 with function in0 = in0_1, function out0 = out0_1
clone NOT as NOT3 with function in0 = in0_2, function out0 = out0_2
clone NOT as NOT4 with function in0 = in0_3, function out0 = out0_3
clone NOT as NOT5 with function in0 = in0_4, function out0 = out0_4
clone NOT as NOT6 with function in0 = in0_5, function out0 = out0_5
clone NOT as NOT7 with function in0 = in0_6, function out0 = out0_6
clone NOT as NOT8 with function in0 = in0_7, function out0 = out0_7
clone NOT as NOT9 with function in0 = in0_8, function out0 = out0_8
clone NOT as NOT10 with function in0 = in0_9, function out0 = out0_9
clone NOT as NOT11 with function in0 = in0_10, function out0 = out0_10
clone NOT as NOT12 with function in0 = in0_11, function out0 = out0_11
clone NOT as NOT13 with function in0 = in0_12, function out0 = out0_12
clone NOT as NOT14 with function in0 = in0_13, function out0 = out0_13
clone NOT as NOT15 with function in0 = in0_14, function out0 = out0_14
clone NOT as NOT16 with function in0 = in0_15, function out0 = out0_15


constant width : int = 16

lemma notv_sem:
	forall t: int.
	(forall k. t - delay <= k < t ->
	 forall n. 0 <= n < width ->
	  in0[n ..][k] = in0[n ..][t-delay]) ->
	forall n. 0 <= n < width ->
	out0[n ..][t] = notb in0[n ..][t-delay]

end

theory AND

use import Wire
use import WireVector
use import int.Int
use import bool.Bool
use NAND
use NOT

function in0: Wire.t
function in1: Wire.t
function out0: Wire.t

constant delay: int = NAND.delay + NOT.delay

function aux0: Wire.t
clone NAND as NAND1 with function in0 = in0, function in1 = in1, function out0 = aux0
clone NOT as NOT1 with function in0 = aux0, function out0 = out0

lemma and_sem:
	forall t: int.
	out0[t] = andb in0[t-delay] in1[t-delay]

end

theory OR

use import Wire
use import WireVector
use import int.Int
use import bool.Bool
use NAND
use NOT

function in0: Wire.t
function in1: Wire.t
function out0: Wire.t

constant delay: int = NAND.delay + NOT.delay

function aux0: Wire.t
clone NOT as NOT1 with function in0 = in0, function out0 = aux0
function aux1: Wire.t
clone NOT as NOT2 with function in0 = in1, function out0 = aux1
clone NAND as NAND1 with function in0 = aux0, function in1 = aux1, function out0 = out0

lemma or_sem:
	forall t: int.
	out0[t] = orb in0[t-delay] in1[t-delay]

end

theory MUX

use import Wire
use import WireVector
use import int.Int
use import bool.Bool
use AND
use NOT
use OR

function in0: Wire.t
function in1: Wire.t
function sel: Wire.t
function out0: Wire.t

constant delay: int = AND.delay + NOT.delay + OR.delay

function aux0: Wire.t
clone NOT as NOT1 with function in0 = sel, function out0 = aux0

function aux1: Wire.t
clone AND as AND1 with function in0 = in0, function in1 = sel, function out0 = aux1

function aux2: Wire.t
clone AND as AND2 with function in0 = in1, function in1 = aux0, function out0 = aux2

clone OR as OR1 with function in0 = aux1, function in1 = aux2, function out0 = out0

lemma mux_sem:
	forall t: int.
	(forall k. t - delay <= k < t ->
	  in0[k] = in0[t-delay] /\ in1[k] = in1[t-delay] /\ sel[k] = sel[t-delay]) ->
	out0[t] = if sel[t-delay] then in0[t-delay] else in1[t-delay]


end




theory MUXV

use import Wire
use import WireVector
use import int.Int
use import bool.Bool
use MUX

function in0: WireVector.t
function in1: WireVector.t
function sel: Wire.t
function out0: WireVector.t

constant delay: int = MUX.delay

function in0_0: Wire.t = in0[0 ..]
function in0_1: Wire.t = in0[1 ..]
function in0_2: Wire.t = in0[2 ..]
function in0_3: Wire.t = in0[3 ..]
function in0_4: Wire.t = in0[4 ..]
function in0_5: Wire.t = in0[5 ..]
function in0_6: Wire.t = in0[6 ..]
function in0_7: Wire.t = in0[7 ..]
function in0_8: Wire.t = in0[8 ..]
function in0_9: Wire.t = in0[9 ..]
function in0_10: Wire.t = in0[10 ..]
function in0_11: Wire.t = in0[11 ..]
function in0_12: Wire.t = in0[12 ..]
function in0_13: Wire.t = in0[13 ..]
function in0_14: Wire.t = in0[14 ..]
function in0_15: Wire.t = in0[15 ..]

function in1_0: Wire.t = in1[0 ..]
function in1_1: Wire.t = in1[1 ..]
function in1_2: Wire.t = in1[2 ..]
function in1_3: Wire.t = in1[3 ..]
function in1_4: Wire.t = in1[4 ..]
function in1_5: Wire.t = in1[5 ..]
function in1_6: Wire.t = in1[6 ..]
function in1_7: Wire.t = in1[7 ..]
function in1_8: Wire.t = in1[8 ..]
function in1_9: Wire.t = in1[9 ..]
function in1_10: Wire.t = in1[10 ..]
function in1_11: Wire.t = in1[11 ..]
function in1_12: Wire.t = in1[12 ..]
function in1_13: Wire.t = in1[13 ..]
function in1_14: Wire.t = in1[14 ..]
function in1_15: Wire.t = in1[15 ..]

function out0_0: Wire.t = out0[0 ..]
function out0_1: Wire.t = out0[1 ..]
function out0_2: Wire.t = out0[2 ..]
function out0_3: Wire.t = out0[3 ..]
function out0_4: Wire.t = out0[4 ..]
function out0_5: Wire.t = out0[5 ..]
function out0_6: Wire.t = out0[6 ..]
function out0_7: Wire.t = out0[7 ..]
function out0_8: Wire.t = out0[8 ..]
function out0_9: Wire.t = out0[9 ..]
function out0_10: Wire.t = out0[10 ..]
function out0_11: Wire.t = out0[11 ..]
function out0_12: Wire.t = out0[12 ..]
function out0_13: Wire.t = out0[13 ..]
function out0_14: Wire.t = out0[14 ..]
function out0_15: Wire.t = out0[15 ..]

clone MUX as MUX1 with function in0 = in0_0, function in1 = in1_0, function sel = sel, function out0 = out0_0
clone MUX as MUX2 with function in0 = in0_1, function in1 = in1_1, function sel = sel, function out0 = out0_1
clone MUX as MUX3 with function in0 = in0_2, function in1 = in1_2, function sel = sel, function out0 = out0_2
clone MUX as MUX4 with function in0 = in0_3, function in1 = in1_3, function sel = sel, function out0 = out0_3
clone MUX as MUX5 with function in0 = in0_4, function in1 = in1_4, function sel = sel, function out0 = out0_4
clone MUX as MUX6 with function in0 = in0_5, function in1 = in1_5, function sel = sel, function out0 = out0_5
clone MUX as MUX7 with function in0 = in0_6, function in1 = in1_6, function sel = sel, function out0 = out0_6
clone MUX as MUX8 with function in0 = in0_7, function in1 = in1_7, function sel = sel, function out0 = out0_7
clone MUX as MUX9 with function in0 = in0_8, function in1 = in1_8, function sel = sel, function out0 = out0_8
clone MUX as MUX10 with function in0 = in0_9, function in1 = in1_9, function sel = sel, function out0 = out0_9
clone MUX as MUX11 with function in0 = in0_10, function in1 = in1_10, function sel = sel, function out0 = out0_10
clone MUX as MUX12 with function in0 = in0_11, function in1 = in1_11, function sel = sel, function out0 = out0_11
clone MUX as MUX13 with function in0 = in0_12, function in1 = in1_12, function sel = sel, function out0 = out0_12
clone MUX as MUX14 with function in0 = in0_13, function in1 = in1_13, function sel = sel, function out0 = out0_13
clone MUX as MUX15 with function in0 = in0_14, function in1 = in1_14, function sel = sel, function out0 = out0_14
clone MUX as MUX16 with function in0 = in0_15, function in1 = in1_15, function sel = sel, function out0 = out0_15

constant width : int = 16

lemma muxv_sem:
	forall t: int.
	(forall k. t - delay <= k < t ->
	 forall n. 0 <= n < width ->
	  in0[n ..][k] = in0[n ..][t-delay] /\
	  in1[n ..][k] = in1[n ..][t-delay] /\
	  sel[k] = sel[t-delay]
	  ) ->
	forall n. 0 <= n < width ->
	out0[n ..][t] = if sel[t-delay] then in0[n ..][t-delay] else in1[n ..][t-delay]

end


theory MUX4WAY16

use import Wire
use import WireVector
use import int.Int
use import bool.Bool
use MUXV

function in0: WireVector.t
function in1: WireVector.t
function in2: WireVector.t
function in3: WireVector.t
function sel: WireVector.t
function out0: WireVector.t

constant delay: int = MUXV.delay * 2

constant width : int = 16

predicate stab_hyp (t: int) (delay: int) = (forall k. t - delay <= k < t ->
	 (forall n. 0 <= n < width ->
	  in0[n ..][k] = in0[n ..][t-delay] /\
	  in1[n ..][k] = in1[n ..][t-delay] /\
	  in2[n ..][k] = in2[n ..][t-delay] /\
	  in3[n ..][k] = in3[n ..][t-delay]) /\
	  (forall n. 0 <= n < 2 ->
	   sel[n ..][k] = sel[n ..][t-delay])
	  )


function sel_0: Wire.t = sel[0 ..]
function sel_1: Wire.t = sel[1 ..]

function aux0: WireVector.t
clone MUXV as MUXV1 with function in0 = in0, function in1 = in1, function sel = sel_0, function out0 = aux0

function aux1: WireVector.t
clone MUXV as MUXV2 with function in0 = in2, function in1 = in3, function sel = sel_0, function out0 = aux1

clone MUXV as MUXV3 with function in0 = aux0, function in1 = aux1, function sel = sel_1, function out0 = out0

lemma muxv_sem:
	forall t: int.
        stab_hyp t delay ->
	forall n. 0 <= n < width -> 
          out0[n ..][t] =
	  if sel[0 ..][t-delay] then (
	     if sel[1 ..][t-delay] then (
	     	in0[n ..][t-delay]
	     ) else (
	        out0[n ..][t]
	     )
	  ) else (
	     if sel[1 ..][t-delay] then (
	        out0[n ..][t]
	     ) else (
	        out0[n ..][t]
	     )
	  )

end