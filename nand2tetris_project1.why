theory NAND

(**)

use import int.Int
use import bool.Bool

(**)

function in1 int: bool
function in2 int: bool

function out1 int: bool

(**)

constant delay : int = 1

axiom sem: forall t t' dtstab: int.
      	   (dtstab >= delay /\ t' >= dtstab + t) ->
	   (forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
           forall t1 t1': int.
	   ( t <= t1 /\ t1' <= t' /\ t1 + delay <= t1' ) ->
	   forall k: int. delay + t1 <= k <= t1' ->
	      out1 k = notb (andb (in1 t) (in2 t))

end

(***************************)

theory NOT_proof

(**)

use import int.Int
use import bool.Bool

(**)

function in1 int: bool

function out1 int: bool

(**)

clone NAND as Nand with function in1 = in1, function in2 = in1, function out1 = out1

(**)

constant delay : int = Nand.delay
lemma delay_value: delay = 1

(**)


lemma sem: forall t t' dtstab: int.
      	   (dtstab >= delay /\ t' >= dtstab + t) ->
	   (forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t) ->
           forall t1 t1': int.
	   ( t <= t1 /\ t1' <= t' /\ t1 + delay <= t1' ) ->
	   forall k: int. delay + t1 <= k <= t1' ->
	      out1 k = notb (in1 t)

end


(*********)


theory NOT

(**)

use import int.Int
use import bool.Bool

(**)

function in1 int: bool

function out1 int: bool

(**)

constant delay : int = 1

(**)

(**)

axiom sem: forall t t' dtstab: int.
      	   (dtstab >= delay /\ t' >= dtstab + t) ->
	   (forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t) ->
           forall t1 t1': int.
	   ( t <= t1 /\ t1' <= t' /\ t1 + delay <= t1' ) ->
	   forall k: int. delay + t1 <= k <= t1' ->
	      out1 k = notb (in1 t)

end

(***************************)

theory AND_proof

(**)

use import int.Int
use import bool.Bool

(**)

function in1 int: bool
function in2 int: bool

function out1 int: bool

(**)

function aux1 int: bool

clone NAND as Nand with function in1 = in1, function in2 = in2, function out1 = aux1

clone NOT as Not with function in1 = aux1, function out1 = out1

(**)

constant delay : int = Nand.delay + Not.delay
lemma delay_value: delay = 2

(**)

lemma Nand_int: forall t t': int.
      		delay + t <= t' ->
		(forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
		forall k: int. Nand.delay + t <= k <= t' ->
		       aux1 k = notb (andb (in1 t) (in2 t))

lemma Not_int: forall t t': int.
      		delay + t <= t' ->
		(forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
		forall k: int. Not.delay + Nand.delay +  t <= k <= t' ->
		       out1 k = notb (notb (andb (in1 t) (in2 t)))

(**)

lemma sem: forall t t' dtstab: int.
      	   (dtstab >= delay /\ t' >= dtstab + t) ->
	   (forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
           forall t1 t1': int.
	   ( t <= t1 /\ t1' <= t' /\ t1 + delay <= t1' ) ->
	   forall k: int. delay + t1 <= k <= t1' ->
	      out1 k = andb (in1 t) (in2 t)

end

(*********)

theory AND

(**)

use import int.Int
use import bool.Bool

(**)

function in1 int: bool
function in2 int: bool

function out1 int: bool

(**)


(**)

constant delay : int = 2

(**)

axiom sem: forall t t' dtstab: int.
      	   (dtstab >= delay /\ t' >= dtstab + t) ->
	   (forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
           forall t1 t1': int.
	   ( t <= t1 /\ t1' <= t' /\ t1 + delay <= t1' ) ->
	   forall k: int. delay + t1 <= k <= t1' ->
	      out1 k = andb (in1 t) (in2 t)

end

(***************************)

theory OR_proof

(**)

use import int.Int
use import bool.Bool

(**)

function in1 int: bool
function in2 int: bool

function out1 int: bool

(**)

function aux1 int: bool
clone NOT as Not1 with function in1 = in1, function out1 = aux1

function aux2 int: bool
clone NOT as Not2 with function in1 = in2, function out1 = aux2

clone NAND as Nand with function in1 = aux1, function in2 = aux2, function out1 = out1

(**)

constant delay : int = Nand.delay + Not1.delay
lemma delay_value: delay = 2

(**)

lemma Not1_int: forall t t': int.
      		delay + t <= t' ->
		(forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
		forall k: int. Not1.delay + t <= k <= t' ->
		       aux1 k = notb (in1 t)

lemma Not2_int: forall t t': int.
      		delay + t <= t' ->
		(forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
		forall k: int. Not2.delay + t <= k <= t' ->
		       aux2 k = notb (in2 t)

lemma Nand_int: forall t t': int.
      		delay + t <= t' ->
		(forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
		forall k: int. Nand.delay + Not2.delay + t <= k <= t' ->
		       out1 k = notb (andb (notb (in1 t)) (notb (in2 t)))

(**)


lemma sem: forall t t' dtstab: int.
      	   (dtstab >= delay /\ t' >= dtstab + t) ->
	   (forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
           forall t1 t1': int.
	   ( t <= t1 /\ t1' <= t' /\ t1 + delay <= t1' ) ->
	   forall k: int. delay + t1 <= k <= t1' ->
	      out1 k = orb (in1 t) (in2 t)

end

(*********)


theory OR

(**)

use import int.Int
use import bool.Bool

(**)

function in1 int: bool
function in2 int: bool

function out1 int: bool

(**)

(**)

constant delay : int = 2

(**)

axiom sem: forall t t' dtstab: int.
      	   (dtstab >= delay /\ t' >= dtstab + t) ->
	   (forall k: int. t <= k <= t' ->
	    	   in1 k = in1 t /\ in2 k = in2 t) ->
           forall t1 t1': int.
	   ( t <= t1 /\ t1' <= t' /\ t1 + delay <= t1' ) ->
	   forall k: int. delay + t1 <= k <= t1' ->
	      out1 k = orb (in1 t) (in2 t)

end

(***************************)

