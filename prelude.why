theory Equiv

(* extensionnal polymorphic equality *)
predicate (==) (x y: 'a)
axiom refl: forall x: 'a. x == x
axiom sym: forall x y: 'a. x == y -> y == x
axiom trans: forall x y z: 'a. x == y -> y == z -> x == z
(* declared equivalent to intentionnal one *)
axiom ext: forall x y: 'a. x == y <-> x = y

end

theory Set

use import Equiv

type set 'a
constant empty_set: set 'a
function add (x: 'a) (s: set 'a) : set 'a

predicate mem (x: 'a) (s: set 'a)

axiom mem_empty_set: forall x: 'a. not (mem x empty_set)
axiom mem_add_ax1: forall s: set 'a. forall x x': 'a. mem x (add x' s) <-> x = x' \/ mem x s

axiom set_eq: forall s1 s2: set 'a. (forall x: 'a. mem x s1 <-> mem x s2) -> s1 == s2

lemma add_comm_eq: forall s: set 'a. forall x x': 'a. (add x (add x' s)) == (add x' (add x s))
lemma add_comm: forall s: set 'a. forall x x': 'a. (add x (add x' s)) = (add x' (add x s))

function inter (s1 s2: set 'a): set 'a
axiom mem_inter: forall s1 s2: set 'a. forall x: 'a. (mem x s1 /\ mem x s2) <-> mem x (inter s1 s2)
lemma inter_empty_set_eq: forall s: set 'a. inter empty_set s == empty_set
lemma inter_empty_set: forall s: set 'a. inter empty_set s = empty_set
lemma inter_comm_eq: forall s1 s2: set 'a. inter s1 s2 == inter s2 s1
lemma inter_comm: forall s1 s2: set 'a. inter s1 s2 = inter s2 s1
lemma inter_assoc_eq: forall s1 s2 s3: set 'a. inter (inter s1 s2) s3 == inter s1 (inter s2 s3)
lemma inter_assoc: forall s1 s2 s3: set 'a. inter (inter s1 s2) s3 = inter s1 (inter s2 s3)

function union (s1 s2: set 'a): set 'a
axiom mem_union: forall s1 s2: set 'a. forall x: 'a. (mem x s1 \/ mem x s2) <-> mem x (union s1 s2)
lemma union_empty_set_eq: forall s: set 'a. union empty_set s == s
lemma union_empty_set: forall s: set 'a. union empty_set s = s
lemma union_comm_eq: forall s1 s2: set 'a. union s1 s2 == union s2 s1
lemma union_comm: forall s1 s2: set 'a. union s1 s2 = union s2 s1
lemma union_assoc_eq: forall s1 s2 s3: set 'a. union (union s1 s2) s3 == union s1 (union s2 s3)
lemma union_assoc: forall s1 s2 s3: set 'a. union (union s1 s2) s3 = union s1 (union s2 s3)
lemma union_is_empty_eq: forall s1 s2: set 'a. union s1 s2 == empty_set <-> s1 == empty_set /\ s2 == empty_set
lemma union_is_empty: forall s1 s2: set 'a. union s1 s2 = empty_set <-> s1 = empty_set /\ s2 = empty_set

lemma inter_union_distrib_eq: forall s1 s2 s3: set 'a. inter s1 (union s2 s3) == union (inter s1 s2) (inter s1 s3)
lemma inter_union_distrib: forall s1 s2 s3: set 'a. inter s1 (union s2 s3) = union (inter s1 s2) (inter s1 s3)

function singleton (x: 'a) : set 'a = add x empty_set

function diff (s1 s2: set 'a): set 'a
axiom mem_diff: forall s1 s2: set 'a. forall x: 'a. (mem x s1 /\ not (mem x s2)) <-> mem x (diff s1 s2)
lemma diff_inter_eq: forall s1 s2: set 'a. diff s1 s2 == diff s1 (inter s1 s2)
lemma diff_inter: forall s1 s2: set 'a. diff s1 s2 = diff s1 (inter s1 s2)
lemma diff_empty_l_eq: forall s: set 'a. diff empty_set s == empty_set
lemma diff_empty_l: forall s: set 'a. diff empty_set s = empty_set
lemma diff_empty_r_eq: forall s: set 'a. diff s empty_set == s
lemma diff_empty_r: forall s: set 'a. diff s empty_set = s
lemma diff_empty_eq: forall s: set 'a. diff s s == empty_set
lemma diff_empty: forall s: set 'a. diff s s = empty_set

predicate include (s1 s2: set 'a) = forall x: 'a. mem x s1 -> mem x s2
lemma include_self: forall s: set 'a. include s s
lemma include_symm_eq: forall s1 s2: set 'a. (include s1 s2 /\ include s2 s1) <-> s1 == s2
lemma include_symm: forall s1 s2: set 'a. (include s1 s2 /\ include s2 s1) <-> s1 = s2
lemma include_inter: forall s1 s2: set 'a. include (inter s1 s2) s1
lemma include_union: forall s1 s2: set 'a. include s1 (union s1 s2)
lemma include_diff: forall s1 s2: set 'a. include (diff s1 s2) s1 

predicate is_sigma_alg (s': set (set 'a)) (s: set 'a) =
	  mem s s' /\
	  (forall x x': set 'a. (mem x s' /\ mem x' s') -> mem (union x x') s') /\
	  (forall x: set 'a. mem x s' -> mem (diff s x) s')

end

theory Map

use import Equiv
use import Set

type map 'a 'b
constant empty_map: map 'a 'b
function ([<-]) (m: map 'a 'b) (x: 'a) (y: 'b): map 'a 'b

use import option.Option

function ([]) (m: map 'a 'b) (x: 'a) : option 'b
axiom get_ax1: forall x:'a. (empty_map: map 'a 'b)[x] = None
axiom get_ax2: forall m: map 'a 'b. forall x: 'a. forall y: 'b. forall x': 'a.
      	       	      x = x' -> (m[x <- y])[x'] = Some y
axiom get_ax3: forall m: map 'a 'b. forall x: 'a. forall y: 'b. forall x': 'a.
      	       	      x <> x' -> (m[x <- y])[x'] = m[x']
axiom map_eq: forall m1 m2: map 'a 'b. (forall x: 'a. m1[x] = m2[x]) -> m1 == m2

lemma map_set_comm_eq: forall m: map 'a 'b. forall x x': 'a. forall y y': 'b.
      		    	   x <> x' -> m[x <- y][x' <- y'] == m[x' <- y'][x <- y]
lemma map_set_comm: forall m: map 'a 'b. forall x x': 'a. forall y y': 'b.
      		    	   x <> x' -> m[x <- y][x' <- y'] = m[x' <- y'][x <- y]
lemma map_set_contrac_eq: forall m: map 'a 'b. forall x x': 'a. forall y y': 'b.
      		    	   x = x' -> m[x <- y][x' <- y'] == m[x' <- y']
lemma map_set_contrac: forall m: map 'a 'b. forall x x': 'a. forall y y': 'b.
      		    	   x = x' -> m[x <- y][x' <- y'] = m[x' <- y']

function domain (m: map 'a 'b) : set 'a
axiom domain_empty_map: domain (empty_map: map 'a 'b) = empty_set
axiom domain_set: forall m: map 'a 'b. forall x: 'a. forall y: 'b. domain m[x <- y] = add x (domain m)
axiom domain_get_ax1: forall m: map 'a 'b. forall x: 'a. mem x (domain m) -> exists y: 'b. m[x] = Some y
axiom domain_get_ax2: forall m: map 'a 'b. forall x: 'a. not (mem x (domain m)) -> m[x] = None

predicate disjoint (m1 m2: map 'a 'b) = inter (domain m1) (domain m2) = empty_set
lemma disjoint_alt: forall m1 m2: map 'a 'b. disjoint m1 m2 <-> inter (domain m1) (domain m2) == empty_set
lemma disjoint_comm: forall m1 m2: map 'a 'b. disjoint m1 m2 -> disjoint m2 m1

function merge (m1 m2: map 'a 'b) : map 'a 'b
axiom merge_ax1: forall m1 m2: map 'a 'b. forall x: 'a. mem x (domain m1) -> (merge m1 m2)[x] = m1[x]
axiom merge_ax2: forall m1 m2: map 'a 'b. forall x: 'a. not (mem x (domain m1)) -> (merge m1 m2)[x] = m2[x]
lemma merge_domain_mem: forall m1 m2: map 'a 'b. forall x: 'a. mem x (domain (merge m1 m2)) <-> mem x (union (domain m1) (domain m2))
lemma merge_domain_eq: forall m1 m2: map 'a 'b. domain (merge m1 m2) == union (domain m1) (domain m2)
lemma merge_domain: forall m1 m2: map 'a 'b. domain (merge m1 m2) = union (domain m1) (domain m2)
lemma merge_comm_eq: forall m1 m2: map 'a 'b. disjoint m1 m2 -> merge m1 m2 == merge m2 m1
lemma merge_comm: forall m1 m2: map 'a 'b. disjoint m1 m2 -> merge m1 m2 = merge m2 m1
lemma merge_assoc_eq: forall m1 m2 m3: map 'a 'b. merge (merge m1 m2) m3 == merge m1 (merge m2 m3)
lemma merge_assoc: forall m1 m2 m3: map 'a 'b. merge (merge m1 m2) m3 = merge m1 (merge m2 m3)
lemma merge_empty_map_eq: forall m: map 'a 'b. merge m empty_map == m
lemma merge_empty_map: forall m: map 'a 'b. merge m empty_map = m

lemma merge_disjoint: forall m m1 m2: map 'a 'b. disjoint m (merge m1 m2) <-> (disjoint m m1 /\ disjoint m m2)


end

theory BitV

use import Bool
use import bool.Bool
use import int.Int
use import int.Power
use import Equiv

constant size: int

axiom size_lb: size > 0

type bitv

function ([]) bitv int : bool
function ([<-]) bitv int bool : bitv

axiom bitv_eq: forall b1 b2: bitv. (forall x: int. (0 <= x /\ x < size) -> b1[x] = b2[x]) <-> b1 == b2

axiom set_out_of_bound: forall bv: bitv. forall i: int. forall b: bool. (i < 0 \/ size <= i) -> bv[i <- b] = bv
axiom set_diff: forall bv: bitv. forall x1 x2: int. forall b1 b2: bool. x1 <> x2 -> bv[x1 <- b1][x2 <- b2] = bv[x2 <- b2][x1 <- b1]
axiom set_eq: forall bv: bitv. forall x1 x2: int. forall b1 b2: bool. x1 = x2 -> bv[x1 <- b1][x2 <- b2] = bv[x2 <- b2]
axiom lookup_set: forall bv: bitv. forall x1 x2: int. forall b: bool. x1 = x2 -> (0 <= x1 /\ x1 < size) -> bv[x1 <- b][x2] = b


constant zeros: bitv
axiom zeros_get: forall i: int. (0 <= i /\ i < size) -> zeros[i] = False

constant ones: bitv
axiom ones: forall i: int. (0 <= i /\ i < size) -> ones[i] = True

function all (b: bool) : bitv
axiom all: forall b: bool. forall i: int. (0 <= i /\ i < size) -> (all b)[i] = b

function notbv (b: bitv): bitv 
axiom notbv_ax: forall b: bitv. forall x: int. (0 <= x /\ x < size) -> (notbv b)[x] = notb b[x]

function andbv (b1 b2: bitv): bitv
axiom andbv_ax: forall b1 b2: bitv. forall x: int. (0 <= x /\ x < size) -> (andbv b1 b2)[x] = andb b1[x] b2[x]

function orbv (b1 b2: bitv): bitv
axiom orbv_ax: forall b1 b2: bitv. forall x: int. (0 <= x /\ x < size) -> (orbv b1 b2)[x] = orb b1[x] b2[x]

function to_uint (b: bitv) : int
axiom bit2uint_zeros: to_uint zeros = 0
axiom bit2uint_set: forall b: bitv. forall x: int. (0 <= x /\ x < size) -> b[x] = True -> to_uint b = to_uint b[x <- False] + power 2 x


function incr (b: bitv): bitv
axiom incr_lwb:  forall b: bitv. (incr b)[0] = xorb b[0] True
axiom incr_nb: forall b: bitv. forall x: int. (0 < x /\ x < size) -> (incr b)[x] = xorb b[x] (andb b[x-1] (notb (incr b)[x-1]))

lemma incr_add_1: forall b: bitv. b <> ones -> to_uint (incr b) = to_uint b + 1

constant weird: bitv
axiom weird_ax: weird[size - 1] = True /\ forall x: int. (0 <= x /\ x < size - 1) -> weird[x] = False

function two_complement (b: bitv) : bitv = incr (notbv b)

lemma two_complement_inv: forall b: bitv. two_complement (two_complement b) = b

function to_sint (b: bitv) : int
axiom bit2sint_pos: forall b: bitv. b[size - 1] = False -> to_sint b = to_uint b
axiom bit2sint_neg: forall b: bitv. b <> weird -> b[size - 1] = True -> to_sint b = - to_uint (two_complement b)
 

end
