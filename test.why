module Test

use int.Int
use int.MinMax
use int.ComputerDivision
use ref.Ref
use array.Array
use real.RealInfix
use real.FromInt
use real.Truncate


val function int2real (i: int) : real
ensures { result = from_int i }


val function real2int (r: real) : int
ensures { result = truncate r }

(*******************)

let left_index (a: array real) (l: int) (u: int) (x: real): int
requires { forall i j. 0 <= i < j <= length a - 1 -> a[i] <. a[j] }
requires { 0 <= l < u < length a /\ a[l] <=. x <. a[u] } 
ensures { 0 <= l <= result < u < length a }
ensures { a[result] <=. x <. a[result+1] }
=
let ref low = l in
let ref high = u in
while low + 1 < high do
variant { high - low }
invariant { 0 <= l <= low <= high <= u < length a }
invariant {low + 1 < high -> a[low] <=. x <. a[high]}
invariant {low + 1 >= high -> a[low] <=. x <. a[low+1]}
let middle = low + div (high - low) 2 in
assert { 0 <= low <= middle <= high < length a };
if a[middle] <=. x then low := middle else high := middle
done;
low

(*******************)

let prepare_positions (a: array real) (lows: array int): real
requires { length a > 1 }
requires { forall i j. 0 <= i < j <= length a - 1 -> a[i] <. a[j] }
requires { length lows = length a }
ensures { result = (a[length a - 1] -. a[0]) /. (from_int (length a)) }
ensures { forall i.
          0 <= i < length lows ->
          0 <= lows[i] < length a
          }
ensures { forall i.
          0 <= i < length lows ->
          a[ lows[i] ] <=. a[0] +. (from_int i) *. result <. a[ min (lows[i] + 1) (length a - 1) ] }
         
=
let step = (a[length a - 1] -. a[0]) /. (int2real (length a)) in

assert { 0.0 <. step <. (a[length a - 1] -. a[0]) /. (int2real (length a - 1)) };

let ref index_lows = 1 in
let ref index_positions = 0 in

assert{ forall i. 0 <= i < length a -> a[0] <=. a[0] +. (int2real i) *. step <. a[length a - 1] };
assert{ forall i. i = 0 -> a[0] = a[0] +. (int2real i) *. step };

while index_positions < length a do
variant { length a - index_positions }
invariant{ 1 <= index_lows <= length a }
invariant{ 0 <= index_positions <= length a }

invariant { forall i.
          0 <= i < index_positions ->
          0 <= lows[i] < length a
          }
invariant { forall i.
            0 <= i < index_positions ->
            a[ lows[i] ] <=. a[0] +. (from_int i) *. step <. a[ min (lows[i] + 1) (length a - 1) ]
          }
invariant { 
            a[ index_lows - 1 ] <=. a[0] +. (from_int index_positions) *. step
          }

let v = a[0] +. (int2real index_positions) *. step in

assert{ 0 <= index_positions < length a };
    while (index_lows < length a && a[ index_lows ] <=. v ) do
    variant { length a - index_lows }
    invariant { 1 <= index_lows <= length a }
    invariant { a[ index_lows - 1 ] <=. v }

        assert { (index_lows + 1) - 1 = index_lows };
        index_lows := index_lows + 1;
        
        
    done;
lows[ index_positions ] <- index_lows - 1;

assert{ a[0] +. (int2real index_positions) *. step <. a[length a - 1] };

index_positions := index_positions + 1;

done;
step

(********)

let inffer_low_high (a: array real) (lows: array int)  (step: real) (x: real): (int, int)
requires { length a > 1 }
requires { forall i j. 0 <= i < j <= length a - 1 -> a[i] <. a[j] }
requires { length lows = length a }
requires { step = (a[length a - 1] -. a[0]) /. (from_int (length a)) }
requires { forall i.
           0 <= i < length lows ->
           0 <= lows[i] < length a
          }
requires { forall i.
           0 <= i < length lows ->
           a[ lows[i] ] <=. a[0] +. (from_int i) *. step <. a[ min (lows[i] + 1) (length a - 1) ] }
requires { a[0] <. x <. a[length a - 1] }
ensures { let (low, high) = result in a[ low ] <=. x <. a[ high ] }
ensures { let (low, high) = result in 0 <= low < high < length a } 

=
assert { step >. 0.0 };

let bucket = real2int( (x -. a[0]) /. step ) in
assert { 0 <= bucket < length a };

(* *)

assert { a[0] +. int2real( bucket ) *. step <=. x };
let low = lows[ bucket ] in
assert { a[ low ] <=. x };


let high = if bucket < length a - 1 then
              let h = lows[ bucket + 1 ] in
              assert { x <. a[0] +. int2real( bucket + 1 ) *. step };
              if h < length a - 1 then h + 1 else length a - 1
           else length a - 1 in

(low, high)


(********)

let left_index_optim (a: array real) (lows: array int) (step: real) (x: real): int
requires { length a > 1 }
requires { forall i j. 0 <= i < j <= length a - 1 -> a[i] <. a[j] }
requires { length lows = length a }
requires { step = (a[length a - 1] -. a[0]) /. (from_int (length a)) }
requires { forall i.
           0 <= i < length lows ->
           0 <= lows[i] < length a
          }
requires { forall i.
           0 <= i < length lows ->
           a[ lows[i] ] <=. a[0] +. (from_int i) *. step <. a[ min (lows[i] + 1) (length a - 1) ] }
requires { a[0] <. x <. a[length a - 1] }
ensures { a[result] <=. x <. a[result+1] }
=
let (low, high) = inffer_low_high a lows step x in
left_index a low high x

(********)

end

